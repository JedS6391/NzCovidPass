using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using NzCovidPass.Core;
using NzCovidPass.Core.Models;
using NzCovidPass.Core.Shared;
using NzCovidPass.Core.Tokens;
using Xunit;

namespace NzCovidPass.Test.Integration;

public class PassVerifierTests
{
    private readonly ServiceProvider _serviceProvider;

    public PassVerifierTests()
    {
        _serviceProvider = CreateServiceProvider();
    }

    [Fact]
    public async Task VerifyAsync_ValidPass_ReturnsSuccessResult()
    {
        // Arrange
        var verifier = GetVerifier();

        // Act
        var result = await verifier.VerifyAsync(SampleCovidPass.Valid);

        // Assert
        Assert.NotNull(result);
        Assert.True(result.HasSucceeded);
        Assert.False(result.HasFailed);
        Assert.NotNull(result.Token);
        Assert.NotNull(result.Pass);
        Assert.Empty(result.FailureReasons);

        ValidateToken(result.Token);
        ValidatePass(result.Pass);
    }

    [Theory]
    [InlineData(SampleCovidPass.PublicKeyInvalid)]
    [InlineData(SampleCovidPass.PublicKeyNotFound)]
    [InlineData(SampleCovidPass.SignatureModified)]
    [InlineData(SampleCovidPass.PayloadModified)]
    [InlineData(SampleCovidPass.Expired)]
    [InlineData(SampleCovidPass.NotActive)]
    [InlineData(SampleCovidPass.InvalidBase32Payload)]
    public async Task VerifyAsync_InvalidPass_ReturnsFailResult(string passPayload)
    {
        // Arrange
        var verifier = GetVerifier();

        // Act
        var result = await verifier.VerifyAsync(passPayload);

        // Assert
        Assert.NotNull(result);
        Assert.False(result.HasSucceeded);
        Assert.True(result.HasFailed);
        Assert.Throws<InvalidOperationException>(() => result.Token);
        Assert.Throws<InvalidOperationException>(() => result.Pass);
        Assert.NotEmpty(result.FailureReasons);
    }

    private static void ValidateToken(CwtSecurityToken token)
    {
        // Header
        Assert.Equal("key-1", token.KeyId);
        Assert.Equal(SecurityAlgorithms.EcdsaSha256, token.Algorithm);

        // Payload
        // Note that the GUIDs here don't exactly line up with the spec, as .NET may reverse the byte order: https://stackoverflow.com/a/9195681
        Assert.Equal("urn:uuid:4df5a460-304e-3243-be33-ad78b1eafa4b", token.Jti);
        Assert.Equal(new Guid("4df5a460-304e-3243-be33-ad78b1eafa4b"), token.Cti);
        Assert.Equal("did:web:nzcp.covid19.health.nz", token.Issuer);
        Assert.Equal(DateTimeOffset.FromUnixTimeSeconds(1635883530), token.NotBefore);
        Assert.Equal(DateTimeOffset.FromUnixTimeSeconds(1951416330), token.Expiry);

        // Signature + key
        Assert.NotNull(token.SigningKey);
        Assert.IsType<JsonWebKey>(token.SigningKey);

        var jsonWebKey = token.SigningKey as JsonWebKey;

        Assert.NotNull(jsonWebKey);
        Assert.Equal("EC", jsonWebKey.Kty);
        Assert.Equal("P-256", jsonWebKey.Crv);
        Assert.Equal("zRR-XGsCp12Vvbgui4DD6O6cqmhfPuXMhi1OxPl8760", jsonWebKey.X);
        Assert.Equal("Iv5SU6FuW-TRYh5_GOrJlcV_gpF_GpFQhCOD8LSk3T0", jsonWebKey.Y);
    }

    private static void ValidatePass(PublicCovidPass pass)
    {
        // Details expected in SampleCovidPass.Valid.
        Assert.Equal("Jack", pass.GivenName);
        Assert.Equal("Sparrow", pass.FamilyName);
        Assert.Equal(new DateTime(year: 1960, month: 4, day: 16), pass.DateOfBirth);
    }

    private PassVerifier GetVerifier() => _serviceProvider.GetRequiredService<PassVerifier>();

    private static ServiceProvider CreateServiceProvider()
    {
        var services = new ServiceCollection();

        services.AddMemoryCache();

        services.AddNzCovidPassVerifier(
            options =>
            {
                var validIssuers = PassVerifierOptions.Defaults.ValidIssuers.ToHashSet();

                // Add test issuer
                validIssuers.Add("did:web:nzcp.covid19.health.nz");

                options.Prefix = PassVerifierOptions.Defaults.Prefix;
                options.Version = PassVerifierOptions.Defaults.Version;
                options.ValidIssuers = validIssuers;
                options.ValidAlgorithms = PassVerifierOptions.Defaults.ValidAlgorithms.ToHashSet();
            }
        );

        return services.BuildServiceProvider();
    }

    // See https://nzcp.covid19.health.nz/#examples
    private static class SampleCovidPass
    {
        public const string Valid
        public const string PublicKeyInvalid
        public const string PublicKeyNotFound
        public const string SignatureModified
        public const string PayloadModified
        public const string Expired = "NZCP:/1/2KCEVIQEIVVWK6JNGEASNICZAEP2KALYDZSGSZB2O5SWEOTOPJRXALTDN53GSZBRHEXGQZLBNR2GQLTOPICRUX5AM2FQIGTBPBPYWYTWMOSGQQDDN5XHIZLYOSBHQJTIOR2HA4Z2F4XXO53XFZ3TGLTPOJTS6MRQGE4C6Y3SMVSGK3TUNFQWY4ZPOYYXQKTIOR2HA4Z2F4XW46TDOAXGG33WNFSDCOJONBSWC3DUNAXG46RPMNXW45DFPB2HGL3WGFTXMZLSONUW63TFGEXDALRQMR2HS4DFQJ2FMZLSNFTGSYLCNRSUG4TFMRSW45DJMFWG6UDVMJWGSY2DN53GSZCQMFZXG4LDOJSWIZLOORUWC3CTOVRGUZLDOSRWSZ3JOZSW4TTBNVSWISTBMNVWUZTBNVUWY6KOMFWWKZ2TOBQXE4TPO5RWI33CNIYTSNRQFUYDILJRGYDVA56TNJCCUN2NVK5NGAYOZ6VIWACYIBM3QXW7SLCMD2WTJ3GSEI5JH7RXAEURGATOHAHXC2O6BEJKBSVI25ICTBR5SFYUDSVLB2F6SJ63LWJ6Z3FWNHOXF6A2QLJNUFRQNTRU";
        public const string NotActive = "NZCP:/1/2KCEVIQEIVVWK6JNGEASNICZAEP2KALYDZSGSZB2O5SWEOTOPJRXALTDN53GSZBRHEXGQZLBNR2GQLTOPICRU2XI5UFQIGTMZIQIWYTWMOSGQQDDN5XHIZLYOSBHQJTIOR2HA4Z2F4XXO53XFZ3TGLTPOJTS6MRQGE4C6Y3SMVSGK3TUNFQWY4ZPOYYXQKTIOR2HA4Z2F4XW46TDOAXGG33WNFSDCOJONBSWC3DUNAXG46RPMNXW45DFPB2HGL3WGFTXMZLSONUW63TFGEXDALRQMR2HS4DFQJ2FMZLSNFTGSYLCNRSUG4TFMRSW45DJMFWG6UDVMJWGSY2DN53GSZCQMFZXG4LDOJSWIZLOORUWC3CTOVRGUZLDOSRWSZ3JOZSW4TTBNVSWISTBMNVWUZTBNVUWY6KOMFWWKZ2TOBQXE4TPO5RWI33CNIYTSNRQFUYDILJRGYDVA27NR3GFF4CCGWF66QGMJSJIF3KYID3KTKCBUOIKIC6VZ3SEGTGM3N2JTWKGDBAPLSG76Q3MXIDJRMNLETOKAUTSBOPVQEQAX25MF77RV6QVTTSCV2ZY2VMN7FATRGO3JATR";
        public const string InvalidBase32Payload
    }
}
